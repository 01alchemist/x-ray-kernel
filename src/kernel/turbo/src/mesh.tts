@turbo class Mesh extends Shape{
	NumTriangles:int32
	Triangles:int32
	box:Box
	tree:Tree

	@method init(SELF, triangles:number, numTriangles:number){
        // console.log(`numTriangles:${numTriangles}`);
        SELF.Triangles = triangles;
        SELF.NumTriangles = numTriangles;
        return SELF;
	}
	static NewMesh(triangles:number, numTriangles:number):number{
		let ptr:number = @new Mesh;
		return Mesh.init(ptr, triangles, numTriangles);
	}

	static dirty(SELF) {
		SELF.box = null;
		SELF.tree = null;
	}
    
	Copy(SELF):number {

		let triangles = @new Triangle.Array(SELF.NumTriangles);
		for (let i=0; i < SELF.NumTriangles;i++) {
			let t = Triangle.Array.at(SELF.Triangles, i);
			let a = @new Triangle;
			Triangle.Copy(t, a);
			Triangle.Array.setAt(triangles, i, a);
		}
		return Mesh.NewMesh(triangles);
	}

    @virtual Compile(SELF) {
		if (!SELF.tree) {
            // console.time("Mesh:Compile");
            // let numShapes:number = SELF.NumTriangles;
            // console.log(`Num shapes:${numShapes}`);
			// let shapes = @new int32.Array(numShapes);
			// for (let i=0; i < numShapes; i++) {
			// 	let t = Triangle.Array.at(SELF.Triangles, i);
             //    int32.Array.setAt(shapes, i, t);
			// }
			SELF.tree = Tree.NewTree(SELF.Triangles, SELF.NumTriangles);
            // console.timeEnd("Mesh:Compile");
		}
        return SELF.tree;
	}

	static Add(SELF, mesh:Mesh) {
        //TODO: Implement
        Mesh.dirty(SELF);
	}

	@virtual BoundingBox(SELF):number {
		if (!SELF.box) {

            let t = int32.Array.at(SELF.Triangles, 0);
			let min = Vector.Clone(Triangle.V1(t));
			let max = Vector.Clone(min);
			for (let i=1;i < SELF.NumTriangles;i++) {
				Vector.Min_mem(Vector.Min_mem(Vector.Min_mem(min, t.V1, min), t.V2, min), t.V3, min);
				Vector.Max_mem(Vector.Max_mem(Vector.Max_mem(max, t.V1, max), t.V2, max), t.V3, max);
			}
            let ptr:number = @new Box;
			SELF.box = Box.Init_mem(ptr, min, max);
		}
		return SELF.box;
	}

    @virtual Intersect(SELF, r:number):Hit {
		return Tree.Intersect(SELF.tree, r);
	}

    @virtual UV(SELF, p:number):number {
		return null; // not implemented
	}

    @virtual MaterialAt(SELF, p:number):number {
		return null; // not implemented
	}

    @virtual NormalAt(SELF, p:number):number {
		return null; // not implemented
	}

	static _SmoothNormalsThreshold(SELF, normal:number, normals:number[], threshold:number):number {
		let result = Vector.NewVector();
		for (let i=0;i < normals.length; i++) {
            let x:number = normals[i];
			if (Vector.Dot_mem(x, normal) >= threshold) {
				Vector.Add_mem(result, x, result);
			}
		}
		return Vector.Normalize_mem(result);
	}

	static SmoothNormalsThreshold(SELF, radians:number) {
		let threshold:number = Math.cos(radians);
		let lookup:number[] = [];
		for (let i=0; i < SELF.NumTriangles; i++) {
            let t:number = int32.Array.at(SELF.Triangles, i);
			lookup[Triangle.V1(t)] = Utils.append(lookup[Triangle.V1(t)], Triangle.N1(t));
			lookup[Triangle.V2(t)] = Utils.append(lookup[Triangle.V2(t)], Triangle.N2(t));
			lookup[Triangle.V3(t)] = Utils.append(lookup[Triangle.V3(t)], Triangle.N3(t));
		}
        for (let i=0; i < SELF.NumTriangles; i++) {
            let t:number = int32.Array.at(SELF.Triangles, i);
			Triangle.N1(t) = Mesh._SmoothNormalsThreshold(SELF, Triangle.N1(t), lookup[Triangle.V1(t)], threshold);
			Triangle.N2(t) = Mesh._SmoothNormalsThreshold(SELF, Triangle.N2(t), lookup[Triangle.V2(t)], threshold);
			Triangle.N3(t) = Mesh._SmoothNormalsThreshold(SELF, Triangle.N3(t), lookup[Triangle.V3(t)], threshold);
		}
	}

	static SmoothNormals(SELF) {
		let lookup:number[] = [];
        for (let i=0; i < SELF.NumTriangles; i++) {
            let t:number = int32.Array.at(SELF.Triangles, i);
			lookup[Triangle.V1(t)] = lookup[Triangle.V1(t)].Add(Triangle.N1(t));
			lookup[Triangle.V2(t)] = lookup[Triangle.V2(t)].Add(Triangle.N2(t));
			lookup[Triangle.V3(t)] = lookup[Triangle.V3(t)].Add(Triangle.N3(t));
		}
		for (let i=0;i < lookup.length;i++) {
			 Vector.Normalize_mem(lookup[i], lookup[i]);
		}
        for (let i=0; i < SELF.NumTriangles; i++) {
            let t:number = int32.Array.at(SELF.Triangles, i);
            Triangle.N1(t) = lookup[Triangle.V1(t)];
			Triangle.N2(t) = lookup[Triangle.V2(t)];
			Triangle.N3(t) = lookup[Triangle.V3(t)];
		}
	}

	static UnitCube(SELF) {
		Mesh.FitInside(SELF, Box.NewBox(Vector.NewVector(), Vector.NewVector(1, 1, 1)), Vector.NewVector());
        Mesh.MoveTo(SELF, Vector.NewVector(), Vector.NewVector(0.5, 0.5, 0.5));
	}

	static MoveTo(SELF, position:number, anchor:number):number {
		let matrix = Matrix.TranslateUnitMatrix(Vector.Sub_mem(position, Box.Anchor(Mesh.BoundingBox(SELF), anchor)) );
		Matrix.Transform(SELF, matrix);
	}

	static FitInside(SELF, box:number, anchor:number) {
        let bsize:number = Box.Size(box);
        let mbox:number = Mesh.BoundingBox(SELF);
        let mbsize:number = Box.Size(mbox);
		let scale:number = Vector.MinComponent_mem(Vector.Div_mem(bsize, mbsize));
		let extra:number = Vector.MulScalar_mem(Vector.Sub_mem(bsize, mbsize), scale);
		let matrix:number = Matrix.Identity();
		Matrix.Translate(matrix, Vector.Negate_mem(Box.Min(mbox)), matrix);
		Matrix.Scale(matrix, Vector.NewVector(scale, scale, scale), matrix);
		Matrix.Translate(matrix, Vector.Add_mem(Box.Min(mbox), Vector.Mul_mem(extra, anchor)));
		Mesh.Transform(SELF, matrix);
	}

	static Transform(SELF, matrix:number) {
        for (let i=0; i < SELF.NumTriangles; i++) {
            let t:number = int32.Array.at(SELF.Triangles, i);
			Triangle.V1(t) = Matrix.MulPosition(matrix, Triangle.V1(t));
			Triangle.V2(t) = Matrix.MulPosition(matrix, Triangle.V2(t));
			Triangle.V3(t) = Matrix.MulPosition(matrix, Triangle.V3(t));
			Triangle.N1(t) = Matrix.MulDirection(matrix, Triangle.N1(t));
			Triangle.N2(t) = Matrix.MulDirection(matrix, Triangle.N2(t));
			Triangle.N3(t) = Matrix.MulDirection(matrix, Triangle.N3(t));
		}
		Mesh.dirty(SELF);
	}

	static SetMaterial(material:number) {
        for (let i=0; i < SELF.NumTriangles; i++) {
            let t:number = int32.Array.at(SELF.Triangles, i);
			Triangle.Material(t) = material;
		}
	}

	static SaveSTL(SELF, path:number):boolean {
		//return STL.SaveSTL(path, SELF)
        //TODO: Implement
	}

} @end