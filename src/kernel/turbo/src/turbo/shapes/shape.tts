interface Hit{
    Shape:number;
}
interface Ray{

}

export enum ShapeType{
	UNKNOWN,
	PLANE,
	CUBE,
	SPHERE,
	TRIANGLE,
	MESH,
    Volume,
    SDFShape
}

@turbo class Shape{

    shapeId:uint32

	@method init(SELF:number, id):number{
        SELF.shapeId = id;
		return SELF;
	}

	@virtual Type(SELF:number){
		return ShapeType.UNKNOWN;
	}

	@virtual ToJSON(SELF:number){
		throw "Pure: Shape.ToJSON()";
	}

	@virtual Compile(SELF:number, c?:number){
		throw "Pure: Shape.Compile()";
	}

	@virtual BoundingBox(SELF:number, c?:number):number{
		throw "Pure: Shape.BoundingBox()";
	}

	@virtual Intersect(SELF:number, ray:Ray, c?:number):Hit{
		throw "Pure: Shape.Intersect()";
	}

	@virtual UV(SELF:number, p:Vector3, c?:number):number{
		throw "Pure: Shape.UV()";
	}

	@virtual NormalAt(SELF:number, p:Vector3, c?:number):number{
		throw "Pure: Shape.NormalAt()";
	}

	@virtual MaterialAt(SELF:number, p:Vector3, c?:number):number{
		throw "Pure: Shape.MaterialAt()";
	}

} @end

@turbo class TransformedShape{

	Shape:int32
	Matrix:Matrix
	Inverse:Matrix

	@method init(SELF:number, shape:number){
        SELF.Shape = shape;
		return SELF;
	}

	static NewTransformedShape(s:number, m:number):number {
		return TransformedShape.init(@new TransformedShape, s, m, Matrix.Inverse(m));
	}

	static BoundingBox(s:TransformedShape):Box {
		return Matrix.MulBox(s, Shape.BoundingBox(s));
	}

	static Intersect(s:number, r:Ray):Hit {
		let shapeRay:Ray = Matrix.MulRay(TransformedShape.Inverse(s), r);
		let hit = Shape.Intersect(s, shapeRay);
		if (!hit.Ok()) {
			return hit;
		}
		let shape:number = hit.Shape;
		let shapePosition:Vector3 = shapeRay.position(hit.T);
		let shapeNormal:Vector3 = Shape.NormalAt(shape, shapePosition);
		let position:Vector3 = Matrix.MulPosition2(s, shapePosition);
		let normal:Vector3 = Matrix.MulDirection2(Matrix.Transpose(Matrix.Inverse(s)), shapeNormal);
		let material = Material.MaterialAt(shape, shapePosition);
		let inside = false;
		if (shapeNormal.dot(shapeRay.direction) > 0) {
            normal = normal.negate();
			inside = true;
		}
		let ray:number = new Ray(position, normal);
		let info = new HitInfo(shape, position, normal, ray, material, inside);
		hit.T = position.sub(r.origin).length();
		hit.HitInfo = info;
		return hit;
	}

} @end