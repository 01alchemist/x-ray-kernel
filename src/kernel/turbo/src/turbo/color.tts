type RGBA  = {
    r:number,
    g:number,
    b:number,
    a:number
};
type RGB = {
    r:number,
    g:number,
    b:number
};

@turbo class Color{

	r:float64
	g:float64
	b:float64

	@method init(SELF:number, color = {r:0,g:0,b:0}):number {
		SELF.r = color.r;
		SELF.g = color.g;
		SELF.b = color.b;
		return SELF;
	}

    static Init_mem(SELF:number, r:number = 0,g:number = 0,b:number = 0):number {
		SELF.r = r;
		SELF.g = g;
		SELF.b = b;
		return SELF;
	}

    static NewColor(color?,g:number = 0,b:number = 0):number {
        let ptr:number = @new Color;
        if(typeof color === "object"){
            return Color.init(ptr, color);
        }else{
            return Color.Init_mem(ptr, color, g, b);
        }
    }
    
	static HexColor(hex:number, c?):number {
		let r = ((hex >> 16) & 255 ) / 255;
		let g = ((hex >> 8) & 255) / 255;
		let b = (hex & 255) / 255;
        let ptr:number = c?c:@new Color;
		return Color.Pow_mem(Color.Init_mem(ptr, r, g, b), 2.2);
	}

    static Kelvin(K:number):number {
        var red:number;
        var green:number;
        var blue:number;
        // red
        if(K >= 6600){
            var a = 351.97690566805693;
            var b = 0.114206453784165;
            var c = -40.25366309332127;
            var x = K/100 - 55;
            red = a + b*x + c*Math.log(x)
        } else {
            red = 255;
        }
        // green
        if(K >= 6600){
            a = 325.4494125711974;
            b = 0.07943456536662342;
            c = -28.0852963507957;
            x = K/100 - 50;
            green = a + b*x + c*Math.log(x)
        } else if (K >= 1000) {
            a = -155.25485562709179;
            b = -0.44596950469579133;
            c = 104.49216199393888;
            x = K/100 - 2;
            green = a + b*x + c*Math.log(x)
        } else {
            green = 0
        }
        // blue
        if (K >= 6600) {
            blue = 255
        } else if (K >= 2000) {
            a = -254.76935184120902;
            b = 0.8274096064007395;
            c = 115.67994401066147;
            x = K/100 - 10;
            blue = a + b*x + c*Math.log(x)
        } else {
            blue = 0
        }
        red = Math.min(1, red/255);
        green = Math.min(1, green/255);
        blue = Math.min(1, blue/255);
        let ptr:number = @new Color;
        return Color.Init_mem(ptr, red, green, blue);
    }

    static FloatRGBA(SELF:number):RGBA {
        return {
            r: Color.r(SELF),
            g: Color.g(SELF),
            b: Color.b(SELF),
            a: 1.0
        };
    }

    static RGB(SELF:number):RGB {
        let _d:Uint8ClampedArray = new Uint8ClampedArray([
            Color.r(SELF) * 255,
            Color.g(SELF) * 255,
            Color.b(SELF) * 255
        ]);
        return rgb(_d[0], _d[1], _d[2]);
    }

    static RGBA(SELF:number):RGBA {
        let _d:Uint8ClampedArray = new Uint8ClampedArray([
            Color.r(SELF) * 255,
            Color.g(SELF) * 255,
            Color.b(SELF) * 255
        ]);
        return {
            r: _d[0],
            g: _d[1],
            b: _d[2],
            a: 255
        };
    }

    static RGBA64(SELF:number):RGBA {
        return {
            r: Math.round(Math.max(0, Math.min(65535, Color.r(SELF) * 65535))),
            g: Math.round(Math.max(0, Math.min(65535, Color.g(SELF) * 65535))),
            b: Math.round(Math.max(0, Math.min(65535, Color.b(SELF) * 65535))),
            a: 65535
        };
    }
    
    static Add(a:RGBA, b:RGBA):RGB { return rgb(a.r + b.r, a.g + b.g, a.b + b.b); }
    static Add2(a:RGBA, b:RGBA):RGB { return new Color3(a.r + b.r, a.g + b.g, a.b + b.b); }

    /**
     *
     * @param a Color 1
     * @param b Color 2
     * @param c result Color
     * @returns {number}
     * @constructor
     */
    static Add_mem(a:number, b:number, c?:number):number {
        if(c){
            Color.r(c) = Color.r(a) + Color.r(b);
            Color.g(c) = Color.g(a) + Color.g(b);
            Color.b(c) = Color.b(a) + Color.b(b);
            return c;
        }else{
            let ptr:number = @new Color;
            return Color.Init_mem(
                ptr,
                Color.r(a) + Color.r(b),
                Color.g(a) + Color.g(b),
                Color.b(a) + Color.b(b)
            );
        }
    }
    static Add_21(a:Color3, b:number, c?:Color3):Color3 {
        c = c?c:new Color3();
        c.r = a.r + Color.r(b);
        c.g = a.g + Color.g(b);
        c.b = a.b + Color.b(b);
        return c;
    }

    static Sub(a:RGBA, b:RGBA):RGB { return rgb(a.r - b.r, a.g - b.g, a.b - b.b); }
    static Sub_mem(a:number, b:number, c?:number):number {
        if(c){
            Color.r(c) = Color.r(a) - Color.r(b);
            Color.g(c) = Color.g(a) - Color.g(b);
            Color.b(c) = Color.b(a) - Color.b(b);
            return c;
        }else{
            let ptr:number = @new Color;
            return Color.Init_mem(
                ptr,
                Color.r(a) - Color.r(b),
                Color.g(a) - Color.g(b),
                Color.b(a) - Color.b(b)
            );
        }
    }
    static Sub_mem2(a:number, b:number, c?:Color3):Color3 {
        c = c?c:new Color3();
        c.r = Color.r(a) - Color.r(b);
        c.g = Color.g(a) - Color.g(b);
        c.b = Color.b(a) - Color.b(b);
        return c;
    }
    static Sub_21(a:Color3, b:number, c?:Color3):Color3 {
        c = c?c:new Color3();
        c.r = a.r - Color.r(b);
        c.g = a.g - Color.g(b);
        c.b = a.b - Color.b(b);
        return c;
    }
    
    static Mul(a:RGBA, b:Color3):RGB { return rgb(a.r * b.r, a.g * b.g, a.b * b.b); }
    static Mul2(a:number, b:Color3):Color3 {
        return new Color3(
            Color.r(a) * b.r,
            Color.g(a) * b.g,
            Color.b(a) * b.b
        );
    }
    static Mul_mem(a:number, b:number, c?:number):number {
        if(c){
            Color.r(c) = Color.r(a) * Color.r(b);
            Color.g(c) = Color.g(a) * Color.g(b);
            Color.b(c) = Color.b(a) * Color.b(b);
            return c;
        }else{
            let ptr:number = @new Color;
            return Color.Init_mem(
                ptr,
                Color.r(a) * Color.r(b),
                Color.g(a) * Color.g(b),
                Color.b(a) * Color.b(b)
            );
        }
    }

    static MulScalar(a:RGBA, f:number):RGB { return rgb(a.r * f, a.g * f, a.b * f); }
    static MulScalar2(a:number, f:number):Color3 {
        return new Color3(
            Color.r(a) * f,
            Color.g(a) * f,
            Color.b(a) * f
        );
    }
    static MulScalar_mem(a:number, f:number, c?:number):number {
        if(c){
            Color.r(c) = Color.r(a) * f;
            Color.g(c) = Color.g(a) * f;
            Color.b(c) = Color.b(a) * f;
            return c;
        }else{
            let ptr:number = @new Color;
            return Color.Init_mem(
                ptr,
                Color.r(a) * f,
                Color.g(a) * f,
                Color.b(a) * f
            );
        }
    }

    static DivScalar(a:RGBA, f:number):RGB { return rgb(a.r / f, a.g / f, a.b / f); }
    static DivScalar_mem(a:number, f:number, c?:number):number {
        if(c){
            Color.r(c) = Color.r(a) / f;
            Color.g(c) = Color.g(a) / f;
            Color.b(c) = Color.b(a) / f;
            return c;
        }else{
            let ptr:number = @new Color;
            return Color.Init_mem(
                ptr,
                Color.r(a) / f,
                Color.g(a) / f,
                Color.b(a) / f
            );
        }
    }

    static Min(a:RGBA, b:RGBA):RGB { return rgb( Math.min(a.r , b.r), Math.min(a.g , b.g), Math.min(a.b , b.b) ); }
    static Min_mem(a:number, b:number, c?:number):number {
        if(c){
            Color.r(c) = Math.min(Color.r(a) , Color.r(b));
            Color.g(c) = Math.min(Color.g(a) , Color.g(b));
            Color.b(c) = Math.min(Color.b(a) , Color.b(b));
            return c;
        }else{
            let ptr:number = @new Color;
            return Color.Init_mem(
                ptr,
                Math.min(Color.r(a) , Color.r(b)),
                Math.min(Color.g(a) , Color.g(b)),
                Math.min(Color.b(a) , Color.b(b))
            );
        }
    }

    static Max(a:RGBA, b:RGBA):RGB {return rgb( Math.max(a.r , b.r), Math.max(a.g , b.g), Math.max(a.b , b.b) );}
    static Max_mem(a:number, b:number, c?:number):number {
        if(c){
            Color.r(c) = Math.max(Color.r(a) , Color.r(b));
            Color.g(c) = Math.max(Color.g(a) , Color.g(b));
            Color.b(c) = Math.max(Color.b(a) , Color.b(b));
            return c;
        }else{
            let ptr:number = @new Color;
            return Color.Init_mem(
                ptr,
                Math.max(Color.r(a) , Color.r(b)),
                Math.max(Color.g(a) , Color.g(b)),
                Math.max(Color.b(a) , Color.b(b))
            );
        }
    }

    static MinComponent(a:RGBA):number {return Math.min(Math.min(a.r, a.g), a.b)}
    static MinComponent_mem(a:number) {
        return Math.min( Math.min(Color.r(a), Color.g(a)), Color.b(a) );
    }

    static MaxComponent(a:RGBA):number { return Math.max(Math.max(a.r, a.g), a.b) }
    static MaxComponent_mem(a:number):number {
        return Math.max( Math.max(Color.r(a), Color.g(a)), Color.b(a) );
    }

    static Pow(a:RGBA, f:number):RGB {return rgb( Math.pow(a.r, f), Math.pow(a.g, f), Math.pow(a.b, f) );}
    static Pow_mem(a:number, f:number, c?:number):number {
        if(c){
            Color.r(c) = Math.pow(Color.r(a) , f);
            Color.g(c) = Math.pow(Color.g(a) , f);
            Color.b(c) = Math.pow(Color.b(a) , f);
            return c;
        }else{
            let ptr:number = @new Color;
            return Color.Init_mem(
                ptr,
                Math.pow(Color.r(a) , f),
                Math.pow(Color.g(a) , f),
                Math.pow(Color.b(a) , f)
            );
        }
    }

    static Mix(a:RGBA, b:RGBA, pct:number):RGB {
        let _a = Color.MulScalar(a, 1 - pct);
        let _b = Color.MulScalar(b, pct);
        return rgb(_a.r + _b.r, _a.g + _b.g, _a.b + _b.b);
    }
    static Mix_mem(a:number, b:number, pct:number, c?:number):number {

        let _a:number = Color.MulScalar_mem(a, 1 - pct);
        let _b:number = Color.MulScalar_mem(b, pct);

        if(c){
            Color.r(c) = Color.r(_a) + Color.r(_b);
            Color.g(c) = Color.g(_a) + Color.g(_b);
            Color.b(c) = Color.b(_a) + Color.b(_b);
            return c;
        }else{
            let ptr:number = @new Color;
            return Color.Init_mem(
                ptr,
                Color.r(_a) + Color.r(_b),
                Color.g(_a) + Color.g(_b),
                Color.b(_a) + Color.b(_b)
            );
        }
    }

    static IsEqual(a:number, b:number):boolean{
        return Color.r(a) === Color.r(b) && Color.g(a) === Color.g(b) && Color.b(a) === Color.b(b);
    }

    static IsBlack(a:number):boolean{
        return Color.IsEqual(a, Color.BLACK);
    }

    static IsWhite(a:number):boolean{
        return Color.IsEqual(a, Color.WHITE);
    }
    static Set(SELF:number, r:number, g:number, b:number) {
        SELF.r = r;
        SELF.g = g;
        SELF.b = b;
        return SELF;
    }

    static Clone(SELF:number, c?:number):number {
        let ptr:number = c?c:@new Color;
        return Color.Init_mem(ptr, SELF.r, SELF.g, SELF.b);
    }

    static get BLACK():number{
        return Color.HexColor(0x000000);
    }
    static get WHITE():number {
        return Color.HexColor(0xFFFFFF);
    }

    static BrightColors = [
        Color.HexColor(0xFF00FF),
        Color.HexColor(0x84FF00),
        Color.HexColor(0xFF0084),
        Color.HexColor(0x00FFFF),
        Color.HexColor(0x00FF84),
        Color.HexColor(0xDD40FF),
        Color.HexColor(0xFFFF00)
    ];

    static RGBAColors = [
        Color.HexColor(0xFF0000),
        Color.HexColor(0x00FF00),
        Color.HexColor(0x0000FF),
        Color.HexColor(0xFFFFFF)
    ];

    static Random():number {
        let ptr:number = @new Color;
        return Color.Init_mem(ptr, Math.random(), Math.random(), Math.random());
    }

    static random():RGB {
        return rgb(Math.random(), Math.random(), Math.random());
    }

    static RandomBrightColor():number {
        var i:number = Math.round(Math.random() * Color.BrightColors.length);
        return Color.BrightColors[i];
    }

    static RandomRGBAColor():number {
        var i:number = Math.round(Math.random() * Color.RGBAColors.length);
        return Color.RGBAColors[i];
    }

    static toColor3(SELF){
        return new Color3(SELF.r, SELF.g, SELF.b);
    }

} @end

