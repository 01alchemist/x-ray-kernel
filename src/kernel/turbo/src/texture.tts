@turbo class Texture {

    Width:int32
    Height:int32
    DataLength:int32
    Data:Color.Array

    @method init(SELF, width:number, height:number, data:number){
        SELF.Width = width;
        SELF.Height = height;
        SELF.Data = data;
    }

    static textures:any = [];

    static GetTexture(path:string):number {

        let texture = Texture.textures[path];
        if(texture) {
            return texture;
        }
        texture = Texture.LoadTexture(path);
        if(texture){
            Texture.textures[path] = texture;
            return texture
        }
        return null;
    }

    static LoadTexture(path:string):number {
        console.log("Loading IMG: "+ path);
        let im = Utils.LoadImage(path);
        return Texture.NewTexture(im);
    }

    static NewTexture(im:number /*Image*/):number /*Texture*/{
        let size:number = Box.Max(Image.Bounds(im));
        let data:number = @new Color.Array(Vector.X(size) * Vector.Y(size));
        for (let y:number = 0; y < Vector.Y(size); y++) {
            for (let x:number = 0; x < Vector.X(size); x++) {
                let index = y * Vector.X(size) + x;
                Color.Array.setAt(data, index, Color.Pow(Image.At(im, x, y), 2.2) );
            }
        }
        let ptr:number = @new Texture;
        return Texture.init(ptr, Vector.X(size), Vector.Y(size), data);
    }

    Pow(t:number, a:number):number {
        let data:number = Texture.Data(t);
        let len:number = Texture.DataLength(t);

        for (let i:number = 0; i < len; i++) {
            let d = Color.Array.at(data, i);
            Color.Pow_mem(d, a, d);
        }
        return t;
    }

    static MulScalar(t:number, a:number):number{
        let data:number = Texture.Data(t);
        let len:number = Texture.DataLength(t);

        for (let i:number = 0; i < len; i++) {
            let d = Color.Array.at(data, i);
            Color.MulScalar_mem(d, a, d);
        }
        return t;
    }

    static bilinearSample(t:number, u:number, v:number):number{
        let Width:number = Texture.Width(t);
        let Height:number = Texture.Height(t);
        let data:number = Texture.Data(t);

        let w:number = Width - 1;
        let h:number = Height - 1;
        
        let _ = Utils.Modf(u * w);
        
        let X = _.int;
        let x = _.frac;
        _ = Utils.Modf(v * h);
        let Y = _.int;
        let y = _.frac;

        let x0:number = parseInt(X);
        let y0:number = parseInt(Y);
        let x1:number = x0 + 1;
        let y1:number = y0 + 1;
        let c00:number = Color.Array.at(data, y0 * Width + x0);
        let c01:number = Color.Array.at(data, y1 * Width + x0);
        let c10:number = Color.Array.at(data, y0 * Width + x1);
        let c11:number = Color.Array.at(data, y1 * Width + x1);
        let c:number = Color.BLACK;
        c = Color.Add_mem(c, Color.MulScalar_mem(c00, (1 - x) * (1 - y)));
        c = Color.Add_mem(c, Color.MulScalar_mem(c10, x * (1 - y)));
        c = Color.Add_mem(c, Color.MulScalar_mem(c01, (1 - x) * y));
        c = Color.Add_mem(c, Color.MulScalar_mem(c11, x * y));
        return c;
    }


    static Sample(t:number, u:number, v:number):number {
        u = Utils.FractAddOne(u);
        v = Utils.FractAddOne(v);
        return Texture.bilinearSample(t, u, 1-v);
    }

    static NormalSample(t:number, u:number, v:number, c?:number):number {
        let c = Texture.Sample(t, u, v);
        let ptr:number = c?c:@new Vector;
        return Vector.Normalize_mem(Vector.Init_mem(ptr, Color.R(c) * 2 - 1, Color.G(c) * 2 - 1, Color.B(c) * 2 - 1), ptr);
    }

    static BumpSample(t:number, u:number, v:number, c?:number):number {
        let Width:number = Texture.Width(t);
        let Height:number = Texture.Height(t);
        let data:number = Texture.Data(t);
        u = Utils.FractAddOne(u);
        v = Utils.FractAddOne(v);
        v = 1 - v;
        let x:number = parseInt(u * Width);
        let y:number = parseInt(v * Height);
        let x1 = Utils.ClampInt(x-1, 0, Width-1);
        let x2 = Utils.ClampInt(x+1, 0, Width-1);
        let y1 = Utils.ClampInt(y-1, 0, Height-1);
        let y2 = Utils.ClampInt(y+1, 0, Height-1);
        let cx = Color.Sub_mem(Color.Array.at(data, y * Width + x1), Color.Array.at(data, y * Width + x2));
        let cy = Color.Sub_mem(Color.Array.at(data, y1 * Width + x), Color.Array.at(data, y2 * Width + x));
        let ptr:number = @new Vector;
        return Vector.Init_mem(ptr, Color.R(cx), Color.R(cy), 0);
    }

} @end